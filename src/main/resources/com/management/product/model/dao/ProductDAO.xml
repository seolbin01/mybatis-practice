<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- * 주석을 지우고 각각 알맞은 태그를 활용하여 내용을 작성하세요. -->

<!-- 1. namesapce 설정을 알맞게 지정하세요. -->
<mapper namespace="com.management.product.model.dao.ProductDAO">

    <!-- 2. ProductDTO type의 resultMap을 설정하세요. -->
    <resultMap id="productResultMap" type="ProductDTO">
        <id property="productCode" column="product_code"/>
        <result property="productName" column="product_name"/>
        <result property="originCost" column="origin_cost"/>
        <result property="releaseDate" column="release_date"/>
        <result property="discountRate" column="discount_rate"/>
        <result property="salesQuantity" column="sales_quantity"/>
        <result property="stockQuantity" column="stock_quantity"/>
        <result property="categoryCode" column="category_code"/>
        <result property="productionStatus" column="production_status"/>
    </resultMap>

    <!-- 3. 전체 목록을 조회하는 쿼리를 작성하세요.
            (쿼리id) selectAllProductList -->
    <select id="selectAllProductList" resultMap="productResultMap">
        SELECT
               product_code
             , product_name
             , origin_cost
             , release_date
             , discount_rate
             , sales_quantity
             , stock_quantity
             , category_code
             , production_status
          FROM product_info
    </select>

    <!-- 4. 조건에 따른 목록을 조회하는 쿼리를 작성하세요.
            (쿼리id) selectProductByCondition
            (참고 1) 제품명 조회인 경우, 검색어를 '포함'한 모든 제품을 조회합니다.
                     (예시) '솔' 검색 -> 솔방울, 칫솔 등 '솔' 포함 제품 모두 조회
            (참고 2) 판매점 유형별 조회의 경우,
                     '백화점'이면 할인율이 0%인 제품, '아울렛'이면 할인율이 1% 이상인 제품을 조회합니다.
            (참고 3) 이달의 신상품 조희의 경우, 출시일이 이번 달인 제품(예를 들어, 현재 기준이면 2023년 5월 출시 제품)울 조회합니다. -->
    <select id="selectProductByCondition" resultMap="productResultMap">
        SELECT
               product_code
             , product_name
             , origin_cost
             , release_date
             , discount_rate
             , sales_quantity
             , stock_quantity
             , category_code
             , production_status
          FROM product_info
        <where>
            <if test="condition == 'productName'">
                product_name LIKE CONCAT('%', #{ value }, '%')
            </if>
            <if test="condition == 'salesStore'">
                <choose>
                    <when test="value == '백화점'">
                        discount_rate = 0
                    </when>
                    <when test="value == '아울렛'">
                        discount_rate > 0
                    </when>
                </choose>
            </if>
            <if test="condition == 'newProduct'">
                LEFT(RELEASE_DATE, 6) = LEFT(DATE_FORMAT(NOW(), '%Y%m%d'), 6)
            </if>
            <if test="condition == 'nonProduction'">
                production_status = 'N'
            </if>
        </where>
    </select>

    <!-- 5. 제품 정보를 등록하는 쿼리를 작성하세요.
            (쿼리id) insertProduct -->
    <insert id="insertProduct" parameterType="com.management.product.model.dto.ProductDTO">
        INSERT INTO
            product_info (product_code, product_name, origin_cost, release_date, discount_rate, sales_quantity, stock_quantity, category_code, production_status)
        VALUES
            (#{ productCode }, #{ productName }, #{ originCost }, #{ releaseDate }, #{ discountRate }, #{ salesQuantity }, #{ stockQuantity }, #{ categoryCode }, #{ productionStatus })
    </insert>

    <!-- 6. 사용자가 수정을 원하는 데이터만 수정하도록 Dynamic Query를 활용한 쿼리를 작성하세요.
            (쿼리id) updateProduct -->
    <update id="updateProduct" parameterType="com.management.product.model.dto.ProductDTO">
        UPDATE product_info
           SET product_name = #{ productName }
             , origin_cost = #{ originCost }
             , release_date = #{ releaseDate }
             , discount_rate = #{ discountRate }
             , sales_quantity = #{ salesQuantity }
             , stock_quantity = #{ stockQuantity }
             , category_code = #{ categoryCode }
             , production_status = #{ productionStatus }
         WHERE product_code = #{ productCode }
    </update>

    <!-- 7. 제품 정보를 삭제하는 쿼리를 작성하세요.
            (쿼리id) deleteProduct -->
    <delete id="deleteProduct" parameterType="string">
        DELETE
          FROM product_info
         WHERE product_code = #{ productCode }
    </delete>

</mapper>
